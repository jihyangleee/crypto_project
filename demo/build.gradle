plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'application'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

application {
	mainClass = 'com.example.demo.ui.ChatApp'
}

tasks.named('run', org.gradle.api.tasks.JavaExec) {
	// Ensure JavaFX modules from runtimeClasspath are passed to the JVM module path
	doFirst {
		// Only include JavaFX jars on the module path to avoid module split-package errors
		def javafxJars = configurations.runtimeClasspath.filter { f -> f.name.toLowerCase().contains('javafx') }
		if (javafxJars.empty) {
			println 'ERROR: JavaFX jars not found on runtimeClasspath'
			System.exit(1)
		}
		def javafxPath = javafxJars.collect { it.absolutePath }.join(File.pathSeparator)
		jvmArgs = ["--module-path", javafxPath, "--add-modules", "javafx.controls,javafx.graphics,javafx.base"]
		classpath = sourceSets.main.runtimeClasspath
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.shell:spring-shell-starter:3.0.0'

	// JavaFX: include platform-specific classifier for native modules
	def osName = System.getProperty('os.name').toLowerCase()
	def javafxPlatform = ''
	if (osName.contains('win')) {
		javafxPlatform = 'win'
	} else if (osName.contains('mac')) {
		javafxPlatform = 'mac'
	} else {
		javafxPlatform = 'linux'
	}

	implementation "org.openjfx:javafx-base:21:${javafxPlatform}"
	implementation "org.openjfx:javafx-graphics:21:${javafxPlatform}"
	implementation "org.openjfx:javafx-controls:21:${javafxPlatform}"
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}
